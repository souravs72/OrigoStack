name: CI Pipeline

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      frontend: ${{ steps.changes.outputs.frontend }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            services:
              - 'services/**'
            frontend:
              - 'frontend/**'
            infrastructure:
              - 'infrastructure/**'
              - 'docker-compose*.yml'
              - '.github/workflows/**'

  lint-and-format:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.services == 'true' || needs.detect-changes.outputs.frontend == 'true'

    strategy:
      matrix:
        service-type: [java, go, python, javascript]

    steps:
      - uses: actions/checkout@v4

      # Java Services (Spring Boot)
      - name: Setup Java
        if: matrix.service-type == 'java'
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        if: matrix.service-type == 'java'
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Lint Java
        if: matrix.service-type == 'java'
        run: |
          find services -name "pom.xml" -execdir mvn spotless:check checkstyle:check \;

      # Go Services
      - name: Setup Go
        if: matrix.service-type == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Lint Go
        if: matrix.service-type == 'go'
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          find services -name "go.mod" -execdir golangci-lint run --timeout=5m \;

      # Python Services (FastAPI)
      - name: Setup Python
        if: matrix.service-type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        if: matrix.service-type == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy

      - name: Lint Python
        if: matrix.service-type == 'python'
        run: |
          find services -name "requirements.txt" -execdir bash -c 'black --check . && ruff check . && mypy .' \;

      # JavaScript/TypeScript Services
      - name: Setup Node.js
        if: matrix.service-type == 'javascript'
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install JS dependencies
        if: matrix.service-type == 'javascript'
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -execdir npm ci \;

      - name: Lint JavaScript/TypeScript
        if: matrix.service-type == 'javascript'
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -execdir npm run lint \;

  unit-tests:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-format]
    if: needs.detect-changes.outputs.services == 'true' || needs.detect-changes.outputs.frontend == 'true'

    strategy:
      matrix:
        service-type: [java, go, python, javascript]

    steps:
      - uses: actions/checkout@v4

      # Java Tests
      - name: Setup Java
        if: matrix.service-type == 'java'
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Run Java Tests
        if: matrix.service-type == 'java'
        run: |
          find services -name "pom.xml" -execdir mvn test \;

      # Go Tests
      - name: Setup Go
        if: matrix.service-type == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run Go Tests
        if: matrix.service-type == 'go'
        run: |
          find services -name "go.mod" -execdir go test -race -cover ./... \;

      # Python Tests
      - name: Setup Python
        if: matrix.service-type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Run Python Tests
        if: matrix.service-type == 'python'
        run: |
          find services -name "requirements.txt" -execdir bash -c 'pip install -r requirements.txt && pip install pytest pytest-cov && pytest --cov=./' \;

      # JavaScript Tests
      - name: Setup Node.js
        if: matrix.service-type == 'javascript'
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Run JavaScript Tests
        if: matrix.service-type == 'javascript'
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -execdir npm test \;

  integration-tests:
    runs-on: ubuntu-latest
    needs: [detect-changes, unit-tests]
    if: needs.detect-changes.outputs.services == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: origo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Integration Tests
        run: |
          docker compose -f docker-compose.test.yml up --build --abort-on-container-exit
        env:
          POSTGRES_URL: postgres://postgres:postgres@localhost:5433/origo_test
          REDIS_URL: redis://localhost:6379

  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.services == 'true' || needs.detect-changes.outputs.infrastructure == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  build-images:
    runs-on: ubuntu-latest
    needs: [detect-changes, unit-tests, security-scan]
    if: needs.detect-changes.outputs.services == 'true'

    strategy:
      matrix:
        service:
          - auth-service
          - control-plane
          - signaling-service
          - recording-service
          - chat-service
          - notification-service
          - billing-service

    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: tests/e2e/package-lock.json

      - name: Install E2E dependencies
        run: |
          cd tests/e2e
          npm ci
          npx playwright install

      - name: Start test environment
        run: |
          docker compose -f docker-compose.e2e.yml up -d 
          sleep 30

      - name: Run E2E tests
        run: |
          cd tests/e2e
          npm test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: tests/e2e/test-results/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests]
    if: github.ref == 'refs/heads/staging'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.12.0"

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to staging
        run: |
          helm upgrade --install origo-stack-staging \
            ./infrastructure/helm/origo-stack \
            -f config/staging/values.yaml \
            --set image.tag=${{ github.sha }} \
            --namespace origo-staging \
            --create-namespace \
            --wait --timeout=10m

      - name: Run smoke tests
        run: |
          ./scripts/deployment/smoke-tests.sh staging
        env:
          STAGING_URL: https://staging.origo.example.com
