services:
  # Performance Simulator Backend
  simulator-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - GO_ENV=development
      - LOG_LEVEL=debug
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=simulator_user
      - DB_PASSWORD=simulator_pass
      - DB_NAME=performance_simulator
      - DB_SSL_MODE=disable
      - MAX_CONCURRENT_SIMULATIONS=10
      - MAX_WORKER_POOLS=10000
    volumes:
      - simulator_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - simulator-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Performance Simulator Frontend
  simulator-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_WS_URL=ws://localhost:8080/ws
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      simulator-backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - simulator-network

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - simulator-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=performance_simulator
      - POSTGRES_USER=simulator_user
      - POSTGRES_PASSWORD=simulator_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - simulator-network
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U simulator_user -d performance_simulator"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    volumes:
      - ./monitoring/prometheus/prometheus.local.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - simulator-network
    depends_on:
      - simulator-backend

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - simulator-network
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger collector
      - "6831:6831/udp" # Jaeger agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - simulator-network

networks:
  simulator-network:
    driver: bridge
    name: origo-simulator-network

volumes:
  simulator_data:
    name: origo-simulator-data
  redis_data:
    name: origo-redis-data
  postgres_data:
    name: origo-postgres-data
  prometheus_data:
    name: origo-prometheus-data
  grafana_data:
    name: origo-grafana-data
